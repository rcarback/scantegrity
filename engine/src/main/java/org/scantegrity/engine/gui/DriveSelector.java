/*
 * DriveSelector.java
 *
 * Created on September 23, 2006, 10:49 AM
 */

package org.scantegrity.engine.gui;
import java.util.*;
import java.io.*;
import javax.swing.*;



/**
 * Note: should probably have named this better, but needs to be done quickly..
 * @author  rick
 */
public class DriveSelector extends javax.swing.JFrame {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form DriveSelector
     */
    public DriveSelector(PunchscanLive p) {
        parent = p;
        initComponents();
    }
    
    public DriveSelector() {
        parent = null;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTesting = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDetected = new javax.swing.JList();
        AddTestedButton = new javax.swing.JButton();
        RemoveTestedButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Drives to Verify");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                LoadDrives(evt);
            }
        });

        jScrollPane1.setViewportView(jListTesting);

        jScrollPane2.setViewportView(jListDetected);

        AddTestedButton.setText(">>>");
        AddTestedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTested(evt);
            }
        });

        RemoveTestedButton.setText("<<<");
        RemoveTestedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveTested(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18));
        jLabel1.setText("Please choose the drives to test:");

        jLabel2.setText("Detected Drives:");

        jLabel3.setText("Drives to be tested:");

        jButton3.setText("Next");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestDrives(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Close(evt);
            }
        });

        jButton5.setText("Add Specific File/Image");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddImage(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 455, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .add(70, 70, 70))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(RemoveTestedButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(AddTestedButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton5)
                            .add(jLabel3)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(60, 60, 60)
                        .add(AddTestedButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(RemoveTestedButton))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton4)
                    .add(jButton3))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddTested(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTested
        swapSelected(jListDetected, jListTesting);
    }//GEN-LAST:event_AddTested

    private void RemoveTested(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveTested
        swapSelected(jListTesting, jListDetected);
    }//GEN-LAST:event_RemoveTested

    private void Close(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Close
        this.dispose();
    }//GEN-LAST:event_Close

    private void TestDrives(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestDrives
        this.dispose();
        parent.TestDrives(jListTesting.getModel());
    }//GEN-LAST:event_TestDrives

    private void AddImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddImage
        JFileChooser jFileChooser;
        jFileChooser = new JFileChooser(new File("/"));
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //Ask for Image
        jFileChooser.setDialogTitle("Choose Location of Image to test");            
            
        jFileChooser.setVisible(true);
        
        int retVal = jFileChooser.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION)
        {
            ListModel oldList = jListTesting.getModel();
            Vector<Object> newList = new Vector<Object>();
            for (int i = 0; i < oldList.getSize(); i++)
            {
                newList.add(oldList.getElementAt(i));
            }
            
            try {
                newList.add(jFileChooser.getSelectedFile().getCanonicalPath());
            }
            catch ( IOException ex )
            {
            	ex.printStackTrace();
            }

            jListTesting.setListData(newList);
        } 
    }//GEN-LAST:event_AddImage

    private void LoadDrives(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_LoadDrives
        //Try to load the /dev/sd* drives and add them to the window.
        Vector<String> drives = new Vector<String>();
        File dev = new File( "/dev" );

        if ( dev.exists() )
        {
            String[] files = dev.list();

            for (int i = 0; i < files.length; i++)
            {
                if ( files[i].matches("sd?[a-z]") )
                    drives.add( "/dev/" + files[i] );
            }
        }

        jListDetected.setListData(drives);
    }//GEN-LAST:event_LoadDrives
    
    private void swapSelected(JList from, JList to)
    {
        ListModel current_values = to.getModel();
        ListModel unchanged_vals = from.getModel();
        Object new_values[] = from.getSelectedValues();
        
        //Remove from detected list
        Vector<Object> leftover_vals = new Vector<Object>();
        boolean is_new;
        for (int i = 0; i < unchanged_vals.getSize(); i++)
        {
            is_new = false;
            for (int j = 0; j < new_values.length; j++)
            {
                if (unchanged_vals.getElementAt(i) == new_values[j])
                {
                    is_new = true;
                    break;
                }
            }
            if (!is_new)
            {
                leftover_vals.add(unchanged_vals.getElementAt(i));                
            }
        }
        from.setListData(leftover_vals);
        
        //Add to the final testing jlist list.
        Vector<Object> final_list = new Vector<Object>();
        for (int i = 0; i < current_values.getSize(); i++)
        {
            final_list.add(current_values.getElementAt(i));
        }
        for (int i = 0; i < new_values.length; i++)
        {
            final_list.add(new_values[i]);
        }
        to.setListData(final_list);        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DriveSelector().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTestedButton;
    private javax.swing.JButton RemoveTestedButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListDetected;
    private javax.swing.JList jListTesting;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    PunchscanLive parent;
}
