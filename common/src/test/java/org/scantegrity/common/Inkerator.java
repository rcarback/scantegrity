/*
 * @(#)Inkerator.java
 *  
 * Copyright (C) 2008 Scantegrity Project
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package org.scantegrity.common;

//Utility libs
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.awt.image.Raster;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import org.scantegrity.common.InvisibleInkFactory;


/**
 * Inkerator is a testing application for invisible ink printers. It utilizes
 * the "InvisibleInkFactory" library to generate the images and allows a user
 * to save them to file.
 * 
 * 
 * @author Richard Carback
 * @version 0.4.2
 * @date 26/11/08
 */
public class Inkerator {

	//Auto-Generated by Visual Eclipse Project
	private JFrame jFrame = null;  //  @jve:decl-index=0:visual-constraint="2,7"
	private JPanel jContentPane = null;
	private JMenuBar jJMenuBar = null;
	private JMenu fileMenu = null;
	private JMenu editMenu = null;
	private JMenu helpMenu = null;
	private JMenuItem exitMenuItem = null;
	private JMenuItem aboutMenuItem = null;
	private JMenuItem cutMenuItem = null;
	private JMenuItem copyMenuItem = null;
	private JMenuItem pasteMenuItem = null;
	private JMenuItem saveMenuItem = null;
	private JDialog aboutDialog = null;  //  @jve:decl-index=0:visual-constraint="918,10"
	private JPanel aboutContentPane = null;
	private JLabel aboutVersionLabel = null;
	private JSplitPane jSplitPane = null;
	private JPanel jPanel = null;
	private JButton Update = null;
	private JButton Save = null;
	private JTextField ImageText = null;
	private JLabel ImageTextLabel = null;
	private JTextField vGridSizeString = null;
	private JLabel vGridSizeLabel = null;
	private JLabel hGridLabel = null;
	private JTextField vGridSpaces = null;
	private JTextField hGridSizes = null;
	private JLabel vGridSpaceLabel = null;
	private JTextField hGridSpaces = null;
	private JLabel hGridSpacesLabel = null;
	private JComboBox FontChooser = null;
	private JLabel fontChooserLabel = null;
	private JLabel ImageLabel = null;
	private JPanel jPanel1 = null;
	private JScrollPane jScrollPane = null;
	private JLabel ZoomLabel = null;
	private JLabel FontSizeLabel = null;
	private JSpinner FontSpinner = null;
	private JLabel SeedLabel = null;
	private JSpinner SeedSpinner = null;
	//Manually Added variables.
	private InvisibleInkFactory imgFactory = null;  //  @jve:decl-index=0:
	private SecureRandom c_csprng = null;  //  @jve:decl-index=0:
	private BufferedImage c_img = null;
	private int c_c = 0;
	private JTextArea DirectionsTextArea = null;
	private JTextField Zoom = null;
	private String c_imgDetails = null;  //  @jve:decl-index=0:
	private JLabel HeightLabel = null;
	private JTextField Height = null;
	private JTextField MinFontColor = null;
	private JTextField MaxFontColor = null;
	private JTextField MinBGColor = null;
	private JTextField MaxBGColor = null;
	private JTextField MinMaskColor = null;
	private JTextField MaxMaskColor = null;
	private JLabel MinFontColorLabel = null;
	private JLabel MaxFontColorLabel = null;
	private JLabel MinBGColorLabel = null;
	private JLabel MaxBGColorLabel = null;
	private JLabel MinMaskColorLabel = null;
	private JLabel MaxMaskColorLabel = null;
	private JLabel Status = null;
	private JLabel SaveNameLabel = null;
	private JTextField SaveName = null;
	private JLabel PaddingLabel = null;
	private JTextField Padding = null;
	/**
	 * GetList - Grabs a list of comma separated integer values from a 
	 * JTextField element. 
	 *
	 * @param l_txtField - The textfield to parse.
	 * @param l_default - a default value to return if the parse is broken.
	 * @return A list of integers that were comma separated.
	 */
	private Integer[] GetList(JTextField l_txtField, int l_default) {
		String l_str = l_txtField.getText();
		String[] l_list = l_str.split(",", l_str.length());
		Vector<Integer> l_ret = new Vector<Integer>();
		int l_tmp = -1;
		for (int l_i = 0; l_i < l_list.length; l_i++) {
			try {
				l_tmp = Integer.parseInt(l_list[l_i]);
			} catch (Exception e) {
				l_tmp = -1;
			}
			if (l_tmp >= 0) {
				l_ret.add(l_tmp);
				l_tmp = -1;
			}			
		}
		if (l_ret.size() == 0) l_ret.add(l_default);
		Integer[] l_int = new Integer[l_ret.size()];
		l_ret.toArray(l_int);
		return l_int;
	}	
	
	/**
	 * GetFloatList - Grabs a list of comma separated float values from a 
	 * JTextField element. 
	 *
	 * @param p_txtField - The textfield to parse.
	 * @param p_default - a default value to return if the parse is broken.
	 * @param p_size - the limit of values to return, set to 0 for no limit.
	 * @return A list of floats that were comma separated.
	 */
	private float[] GetFloatList(JTextField p_txtField, float[] p_default,
								 int p_size) {
		String l_str = p_txtField.getText();
		String[] l_list = l_str.split(",", l_str.length());
		float l_tmp = -1;
		int l_size = l_list.length;
		if (p_size != 0) l_size = p_size;

		float[] l_ret = new float[l_size];		
		for (int l_i = 0; l_i < l_size; l_i++) {
			if (l_i < p_default.length) l_ret[l_i] = p_default[l_i];
			else l_ret[l_i] = 0;
			try {
				l_tmp = Float.parseFloat(l_list[l_i]);
			} catch (Exception e) {
				l_tmp = -1;
			}
			if (l_tmp >= 0) {
				l_ret[l_i] = l_tmp;
				l_tmp = -1;
			}			
		}
		return l_ret;
	}	
	
	/**
	 * Save - Saves the current image as a PDF.
	 */
	private void Save() {
		try {
			Raster l_tmpRaster = c_img.getRaster();
			DataBuffer l_db = l_tmpRaster.getDataBuffer();
			byte[] l_bytes = new byte[l_db.getSize()];

			for (int l_i = 0; l_i < l_bytes.length; l_i++) {
				l_bytes[l_i] = (byte)Math.round(l_db.getElemFloat(l_i)*(float)255);
			}
			
			
			com.itextpdf.text.Image l_img = com.itextpdf.text.Image.getInstance(
														l_tmpRaster.getWidth(), 
														l_tmpRaster.getHeight(), 
														4, 8, l_bytes);
			l_img.setDpi(300, 300);
			float l_percent = Float.parseFloat(Height.getText());
			l_percent = 100*(l_percent/l_img.getHeight());
			c_imgDetails += "Final Scaling Percentage: " + l_percent + "\n";
			l_img.scalePercent(l_percent);
			Document l_doc = new Document();
			//l_doc.setMargins(0,0,0,0);

			//Make sure we don't overwrite previous saves.
			String l_saveName = SaveName.getText();
			String l_tmpStr = l_saveName.replace("#", ""+c_c);;
			File l_tmpFile = new File(l_tmpStr);
			while (l_tmpFile.exists() && l_saveName != l_tmpStr) {
				c_c++;
				l_tmpStr = l_saveName.replace("#", ""+c_c);
				l_tmpFile = new File(l_tmpStr);
			}
			l_saveName = l_saveName.replace("#", ""+c_c);
			
			PdfWriter.getInstance(l_doc, new FileOutputStream(l_saveName));
			l_doc.open();
			l_doc.add(l_img);
			Paragraph l_p = new Paragraph("Version: 0.4.2\n" + c_imgDetails);
			l_doc.add(l_p);
			l_doc.close();		
			c_c++;
			Status.setText("Status: Saved " + l_saveName);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}
	
	/**
	 * UpdateImage - Updates the image display.
	 */
	private void UpdateImage() {
		c_imgDetails = "--Image Details-- \n";
		
		if (imgFactory == null) imgFactory = new InvisibleInkFactory();
		
		//The text to Display                 
		String l_imgText = getImageText().getText();
		c_imgDetails += "Text: " + l_imgText + "\n";
		
		//Padding
		int l_pad = Integer.parseInt(Padding.getText());
		c_imgDetails += "Padding: " + l_pad + "\n";
		imgFactory.setPadding(l_pad);
		
		//Set the grids.
		Integer[][] l_grids = {GetList(getVGridSizeString(), 5), 
							 GetList(getVGridSpaces(), 1),
							 GetList(getHGridSizes(), 5), 
							 GetList(getHGridSpaces(), 1)};
		String l_cStr = "";
		
		l_cStr = Arrays.toString(l_grids[0]);
		c_imgDetails += "vGridSize: " + l_cStr + "\n";
		vGridSizeString.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_grids[1]);		
		c_imgDetails += "vGridSpaceSize: " + l_cStr + "\n";
		vGridSpaces.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_grids[2]);		
		c_imgDetails += "hGridSize: " + l_cStr + "\n";
		hGridSizes.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_grids[3]);		
		c_imgDetails += "hGridSpaceSize: " + l_cStr + "\n";
		hGridSpaces.setText(l_cStr.substring(1, l_cStr.length()-1));
		
		imgFactory.setGrid(l_grids[0], l_grids[1], l_grids[2], l_grids[3]); 
		
		//The CSPRNG Seed
		try {
			c_csprng = SecureRandom.getInstance("SHA1PRNG");
			long l_seed = Integer.parseInt(SeedSpinner.getValue().toString());
			c_csprng.setSeed(l_seed);
			c_imgDetails += "Seed: " + l_seed + "\n";
			imgFactory.setCSPRNG(c_csprng);
		} catch (Exception e) {
			c_csprng = null;
		}
		
		//Create and set font size.
		Font l_font = new Font((String)getFontChooser().getSelectedItem(), 
				   Font.BOLD, Integer.parseInt(FontSpinner.getValue().toString()));
		imgFactory.setFont(l_font);
		c_imgDetails += "Font: " + l_font.getName() + "\n";
		c_imgDetails += "Font Size: " + l_font.getSize() + "\n";

		//The zoom factor.
		double l_zoom = Double.parseDouble((Zoom.getText()));
		c_imgDetails += "Zoom: " + l_zoom + "\n";
		Zoom.setText("" + l_zoom);

		//Save Height
		c_imgDetails += "Save Height: " + Height.getText() + "\n";
		
		//Read in and set all the colors
		float l_colors[][] = { {0,0,0,0},
								{(float).5,0,0,0},
								{0,0,0,0},
								{0,(float).5,0,0},
								{0,0,0,0},
								{0,0,(float).5,0}
							 };
				
		l_colors[0] = GetFloatList(MinMaskColor, l_colors[0], 4);
		l_colors[1] = GetFloatList(MaxMaskColor, l_colors[1], 4);
		l_colors[2] = GetFloatList(MinFontColor, l_colors[2], 4);
		l_colors[3] = GetFloatList(MaxFontColor, l_colors[3], 4);
		l_colors[4] = GetFloatList(MinBGColor, l_colors[4], 4);
		l_colors[5] = GetFloatList(MaxBGColor, l_colors[5], 4);
		
		//Check for additive errors with the Cyan and fix them if possible.
		/* TODO: This doesn't really work all that great. The Factory should
		 * probably just handle all this stuff for us. 
		 */
		for (int l_j = 2; l_j < 5; l_j++) {
			for (int l_i = 0; l_i < 4; l_i++) {
				//Min Cyan + Font
				if ((l_colors[0][l_i] + l_colors[l_j][l_i]) > 1 ||
						(l_colors[1][l_i] + l_colors[l_j][l_i]) > 1) {
					c_imgDetails += "Error! Color overloaded. Mask + Font/BG Colors " +
					"added together should not be more than 1! \n";
					l_colors[0][l_i] = 0;
					l_colors[l_j][l_i] = 0;
					Status.setText("Color overload error!");
				}
			}
		}
		//Report results back to users
		l_cStr = Arrays.toString(l_colors[0]);
		MinMaskColor.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_colors[1]);
		MaxMaskColor.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_colors[2]);
		MinFontColor.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_colors[3]);
		MaxFontColor.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_colors[4]);
		MinBGColor.setText(l_cStr.substring(1, l_cStr.length()-1));
		l_cStr = Arrays.toString(l_colors[5]);
		MaxBGColor.setText(l_cStr.substring(1, l_cStr.length()-1));
		
		imgFactory.setMinMaskColor(l_colors[0]);
		imgFactory.setMaxMaskColor(l_colors[1]);
		imgFactory.setMinFontColor(l_colors[2]);
		imgFactory.setMaxFontColor(l_colors[3]);
		imgFactory.setMinBgColor(l_colors[4]);
		imgFactory.setMaxBgColor(l_colors[5]);
		
		c_imgDetails += "Color Details:\n";
		c_imgDetails += "\tFont Color: " + Arrays.toString(l_colors[2]) + ";" 
						+ Arrays.toString(l_colors[3]) + "\n";
		c_imgDetails += "\tBG Color: " + Arrays.toString(l_colors[4]) + ";" 
						+ Arrays.toString(l_colors[5]) + "\n";
		c_imgDetails += "\tMask Color: " + Arrays.toString(l_colors[0]) + ";" 
						+ Arrays.toString(l_colors[1]) + "\n";		
		
		long l_time = System.currentTimeMillis();
		c_img = imgFactory.getBufferedImage(l_imgText);
		l_time = System.currentTimeMillis() - l_time;
		
		c_imgDetails += "Time to Generate: " + l_time + "ms\n";
		Status.setText("Status: Generated in " + l_time + "ms");
		
		//Display image in the GUI.
		Image l_result = c_img.getScaledInstance((int)(c_img.getWidth()*l_zoom), 
											  (int)(c_img.getHeight()*l_zoom), 
												BufferedImage.SCALE_FAST);
		if (Height.getText().equalsIgnoreCase("0")) {
			Height.setText("" + l_result.getHeight(null));
			c_imgDetails += "Save Height Updated (it was originally 0): " +
									Height.getText() + "\n";
		}
		
		ImageIcon l_icon = new ImageIcon(l_result);
		JLabel l_imgLabel = getImageLabel();
		l_imgLabel.setIcon(l_icon);
		l_imgLabel.repaint();
	}		
	
	/**
	 * This method initializes jFrame
	 * 
	 * @return javax.swing.JFrame
	 */
	private JFrame getJFrame() {
		if (jFrame == null) {
			jFrame = new JFrame();
			jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			jFrame.setJMenuBar(getJJMenuBar());
			jFrame.setSize(905, 604);
			jFrame.setContentPane(getJContentPane());
			jFrame.setTitle("Application");
		}
		return jFrame;
	}

	/**
	 * This method initializes jContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getJContentPane() {
		if (jContentPane == null) {
			jContentPane = new JPanel();
			jContentPane.setLayout(new BorderLayout());
			jContentPane.add(getJSplitPane(), BorderLayout.CENTER);
		}
		return jContentPane;
	}

	/**
	 * This method initializes jJMenuBar	
	 * 	
	 * @return javax.swing.JMenuBar	
	 */
	private JMenuBar getJJMenuBar() {
		if (jJMenuBar == null) {
			jJMenuBar = new JMenuBar();
			jJMenuBar.add(getFileMenu());
			jJMenuBar.add(getEditMenu());
			jJMenuBar.add(getHelpMenu());
		}
		return jJMenuBar;
	}

	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getFileMenu() {
		if (fileMenu == null) {
			fileMenu = new JMenu();
			fileMenu.setText("File");
			fileMenu.add(getSaveMenuItem());
			fileMenu.add(getExitMenuItem());
		}
		return fileMenu;
	}

	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getEditMenu() {
		if (editMenu == null) {
			editMenu = new JMenu();
			editMenu.setText("Edit");
			editMenu.add(getCutMenuItem());
			editMenu.add(getCopyMenuItem());
			editMenu.add(getPasteMenuItem());
		}
		return editMenu;
	}

	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getHelpMenu() {
		if (helpMenu == null) {
			helpMenu = new JMenu();
			helpMenu.setText("Help");
			helpMenu.add(getAboutMenuItem());
		}
		return helpMenu;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getExitMenuItem() {
		if (exitMenuItem == null) {
			exitMenuItem = new JMenuItem();
			exitMenuItem.setText("Exit");
			exitMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.exit(0);
				}
			});
		}
		return exitMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getAboutMenuItem() {
		if (aboutMenuItem == null) {
			aboutMenuItem = new JMenuItem();
			aboutMenuItem.setText("About");
			aboutMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					JDialog aboutDialog = getAboutDialog();
					aboutDialog.pack();
					Point loc = getJFrame().getLocation();
					loc.translate(20, 20);
					aboutDialog.setLocation(loc);
					aboutDialog.setVisible(true);
				}
			});
		}
		return aboutMenuItem;
	}

	/**
	 * This method initializes aboutDialog	
	 * 	
	 * @return javax.swing.JDialog
	 */
	private JDialog getAboutDialog() {
		if (aboutDialog == null) {
			aboutDialog = new JDialog(getJFrame(), true);
			aboutDialog.setTitle("About");
			aboutDialog.setSize(new Dimension(328, 111));
			aboutDialog.setContentPane(getAboutContentPane());
		}
		return aboutDialog;
	}

	/**
	 * This method initializes aboutContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getAboutContentPane() {
		if (aboutContentPane == null) {
			BorderLayout borderLayout = new BorderLayout();
			borderLayout.setHgap(0);
			borderLayout.setVgap(0);
			aboutContentPane = new JPanel();
			aboutContentPane.setLayout(borderLayout);
			aboutContentPane.add(getAboutVersionLabel(), BorderLayout.SOUTH);
			aboutContentPane.add(getDirectionsTextArea(), BorderLayout.CENTER);
		}
		return aboutContentPane;
	}

	/**
	 * This method initializes aboutVersionLabel	
	 * 	
	 * @return javax.swing.JLabel	
	 */
	private JLabel getAboutVersionLabel() {
		if (aboutVersionLabel == null) {
			aboutVersionLabel = new JLabel();
			aboutVersionLabel.setText("Version 0.4.2");
			aboutVersionLabel.setHorizontalAlignment(SwingConstants.CENTER);
		}
		return aboutVersionLabel;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getCutMenuItem() {
		if (cutMenuItem == null) {
			cutMenuItem = new JMenuItem();
			cutMenuItem.setText("Cut");
			cutMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
					Event.CTRL_MASK, true));
		}
		return cutMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getCopyMenuItem() {
		if (copyMenuItem == null) {
			copyMenuItem = new JMenuItem();
			copyMenuItem.setText("Copy");
			copyMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
					Event.CTRL_MASK, true));
		}
		return copyMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getPasteMenuItem() {
		if (pasteMenuItem == null) {
			pasteMenuItem = new JMenuItem();
			pasteMenuItem.setText("Paste");
			pasteMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
					Event.CTRL_MASK, true));
		}
		return pasteMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getSaveMenuItem() {
		if (saveMenuItem == null) {
			saveMenuItem = new JMenuItem();
			saveMenuItem.setText("Save");
			saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
					Event.CTRL_MASK, true));
			saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					Save();				
				}
			});
		}
		return saveMenuItem;
	}

	/**
	 * This method initializes jSplitPane	
	 * 	
	 * @return javax.swing.JSplitPane	
	 */
	private JSplitPane getJSplitPane() {
		if (jSplitPane == null) {
			jSplitPane = new JSplitPane();
			jSplitPane.setLeftComponent(getJPanel());
			jSplitPane.setRightComponent(getJScrollPane());
		}
		return jSplitPane;
	}

	/**
	 * This method initializes jPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getJPanel() {
		if (jPanel == null) {
			GridBagConstraints gridBagConstraints72 = new GridBagConstraints();
			gridBagConstraints72.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints72.gridy = 5;
			gridBagConstraints72.weightx = 1.0;
			gridBagConstraints72.anchor = GridBagConstraints.WEST;
			gridBagConstraints72.gridx = 1;
			GridBagConstraints gridBagConstraints62 = new GridBagConstraints();
			gridBagConstraints62.gridx = 0;
			gridBagConstraints62.anchor = GridBagConstraints.WEST;
			gridBagConstraints62.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints62.gridy = 5;
			PaddingLabel = new JLabel();
			PaddingLabel.setText("Padding:");
			GridBagConstraints gridBagConstraints53 = new GridBagConstraints();
			gridBagConstraints53.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints53.gridy = 24;
			gridBagConstraints53.weightx = 1.0;
			gridBagConstraints53.anchor = GridBagConstraints.WEST;
			gridBagConstraints53.gridx = 1;
			GridBagConstraints gridBagConstraints32 = new GridBagConstraints();
			gridBagConstraints32.gridx = 0;
			gridBagConstraints32.anchor = GridBagConstraints.WEST;
			gridBagConstraints32.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints32.gridy = 24;
			SaveNameLabel = new JLabel();
			SaveNameLabel.setText("Save Name:");
			GridBagConstraints gridBagConstraints24 = new GridBagConstraints();
			gridBagConstraints24.gridx = 0;
			gridBagConstraints24.gridwidth = 2;
			gridBagConstraints24.anchor = GridBagConstraints.WEST;
			gridBagConstraints24.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints24.gridy = 27;
			Status = new JLabel();
			Status.setText("Status: ");
			GridBagConstraints gridBagConstraints141 = new GridBagConstraints();
			gridBagConstraints141.gridx = 0;
			gridBagConstraints141.anchor = GridBagConstraints.WEST;
			gridBagConstraints141.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints141.gridy = 23;
			MaxMaskColorLabel = new JLabel();
			MaxMaskColorLabel.setText("Max Mask Color:");
			GridBagConstraints gridBagConstraints131 = new GridBagConstraints();
			gridBagConstraints131.gridx = 0;
			gridBagConstraints131.anchor = GridBagConstraints.WEST;
			gridBagConstraints131.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints131.gridy = 22;
			MinMaskColorLabel = new JLabel();
			MinMaskColorLabel.setText("Min Mask Color:");
			GridBagConstraints gridBagConstraints121 = new GridBagConstraints();
			gridBagConstraints121.gridx = 0;
			gridBagConstraints121.anchor = GridBagConstraints.WEST;
			gridBagConstraints121.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints121.gridy = 21;
			MaxBGColorLabel = new JLabel();
			MaxBGColorLabel.setText("Max BG Color:");
			GridBagConstraints gridBagConstraints111 = new GridBagConstraints();
			gridBagConstraints111.gridx = 0;
			gridBagConstraints111.anchor = GridBagConstraints.WEST;
			gridBagConstraints111.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints111.gridy = 20;
			MinBGColorLabel = new JLabel();
			MinBGColorLabel.setText("Min BG Color:");
			GridBagConstraints gridBagConstraints101 = new GridBagConstraints();
			gridBagConstraints101.gridx = 0;
			gridBagConstraints101.anchor = GridBagConstraints.WEST;
			gridBagConstraints101.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints101.gridy = 19;
			MaxFontColorLabel = new JLabel();
			MaxFontColorLabel.setText("Max Font Color:");
			GridBagConstraints gridBagConstraints91 = new GridBagConstraints();
			gridBagConstraints91.gridx = 0;
			gridBagConstraints91.anchor = GridBagConstraints.WEST;
			gridBagConstraints91.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints91.gridy = 18;
			MinFontColorLabel = new JLabel();
			MinFontColorLabel.setText("Min Font Color:");
			GridBagConstraints gridBagConstraints81 = new GridBagConstraints();
			gridBagConstraints81.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints81.gridy = 23;
			gridBagConstraints81.weightx = 1.0;
			gridBagConstraints81.anchor = GridBagConstraints.WEST;
			gridBagConstraints81.gridx = 1;
			GridBagConstraints gridBagConstraints71 = new GridBagConstraints();
			gridBagConstraints71.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints71.gridy = 22;
			gridBagConstraints71.weightx = 1.0;
			gridBagConstraints71.anchor = GridBagConstraints.WEST;
			gridBagConstraints71.gridx = 1;
			GridBagConstraints gridBagConstraints61 = new GridBagConstraints();
			gridBagConstraints61.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints61.gridy = 21;
			gridBagConstraints61.weightx = 1.0;
			gridBagConstraints61.anchor = GridBagConstraints.WEST;
			gridBagConstraints61.gridx = 1;
			GridBagConstraints gridBagConstraints52 = new GridBagConstraints();
			gridBagConstraints52.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints52.gridy = 20;
			gridBagConstraints52.weightx = 1.0;
			gridBagConstraints52.anchor = GridBagConstraints.WEST;
			gridBagConstraints52.gridx = 1;
			GridBagConstraints gridBagConstraints41 = new GridBagConstraints();
			gridBagConstraints41.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints41.gridy = 19;
			gridBagConstraints41.weightx = 1.0;
			gridBagConstraints41.anchor = GridBagConstraints.WEST;
			gridBagConstraints41.gridx = 1;
			GridBagConstraints gridBagConstraints3 = new GridBagConstraints();
			gridBagConstraints3.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints3.gridy = 18;
			gridBagConstraints3.weightx = 1.0;
			gridBagConstraints3.anchor = GridBagConstraints.WEST;
			gridBagConstraints3.gridx = 1;
			GridBagConstraints gridBagConstraints23 = new GridBagConstraints();
			gridBagConstraints23.fill = GridBagConstraints.BOTH;
			gridBagConstraints23.gridy = 17;
			gridBagConstraints23.weightx = 1.0;
			gridBagConstraints23.anchor = GridBagConstraints.WEST;
			gridBagConstraints23.gridx = 1;
			GridBagConstraints gridBagConstraints16 = new GridBagConstraints();
			gridBagConstraints16.gridx = 0;
			gridBagConstraints16.anchor = GridBagConstraints.WEST;
			gridBagConstraints16.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints16.gridy = 17;
			HeightLabel = new JLabel();
			HeightLabel.setText("Save Height:");
			GridBagConstraints gridBagConstraints22 = new GridBagConstraints();
			gridBagConstraints22.fill = GridBagConstraints.BOTH;
			gridBagConstraints22.gridy = 16;
			gridBagConstraints22.weightx = 1.0;
			gridBagConstraints22.anchor = GridBagConstraints.WEST;
			gridBagConstraints22.gridx = 1;
			GridBagConstraints gridBagConstraints51 = new GridBagConstraints();
			gridBagConstraints51.gridx = 1;
			gridBagConstraints51.fill = GridBagConstraints.BOTH;
			gridBagConstraints51.anchor = GridBagConstraints.WEST;
			gridBagConstraints51.gridy = 12;
			GridBagConstraints gridBagConstraints2 = new GridBagConstraints();
			gridBagConstraints2.gridx = 0;
			gridBagConstraints2.anchor = GridBagConstraints.WEST;
			gridBagConstraints2.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints2.gridy = 12;
			SeedLabel = new JLabel();
			SeedLabel.setText("Random Seed:");
			GridBagConstraints gridBagConstraints17 = new GridBagConstraints();
			gridBagConstraints17.gridx = 1;
			gridBagConstraints17.fill = GridBagConstraints.BOTH;
			gridBagConstraints17.gridwidth = 2;
			gridBagConstraints17.gridy = 15;
			GridBagConstraints gridBagConstraints18 = new GridBagConstraints();
			gridBagConstraints18.gridx = 0;
			gridBagConstraints18.anchor = GridBagConstraints.WEST;
			gridBagConstraints18.gridy = 15;
			FontSizeLabel = new JLabel();
			FontSizeLabel.setText("Font Size:");
			GridBagConstraints gridBagConstraints15 = new GridBagConstraints();
			gridBagConstraints15.gridx = 0;
			gridBagConstraints15.anchor = GridBagConstraints.WEST;
			gridBagConstraints15.gridy = 16;
			ZoomLabel = new JLabel();
			ZoomLabel.setText("Zoom:");
			GridBagConstraints gridBagConstraints14 = new GridBagConstraints();
			gridBagConstraints14.gridx = 0;
			gridBagConstraints14.anchor = GridBagConstraints.WEST;
			gridBagConstraints14.gridy = 13;
			fontChooserLabel = new JLabel();
			fontChooserLabel.setText("Font:");
			GridBagConstraints gridBagConstraints13 = new GridBagConstraints();
			gridBagConstraints13.fill = GridBagConstraints.BOTH;
			gridBagConstraints13.gridy = 13;
			gridBagConstraints13.weightx = 1.0;
			gridBagConstraints13.anchor = GridBagConstraints.WEST;
			gridBagConstraints13.gridx = 1;
			GridBagConstraints gridBagConstraints12 = new GridBagConstraints();
			gridBagConstraints12.gridx = 0;
			gridBagConstraints12.anchor = GridBagConstraints.WEST;
			gridBagConstraints12.gridy = 10;
			hGridSpacesLabel = new JLabel();
			hGridSpacesLabel.setText("Horizonal Grid Spaces:");
			GridBagConstraints gridBagConstraints11 = new GridBagConstraints();
			gridBagConstraints11.fill = GridBagConstraints.BOTH;
			gridBagConstraints11.gridy = 10;
			gridBagConstraints11.weightx = 1.0;
			gridBagConstraints11.anchor = GridBagConstraints.WEST;
			gridBagConstraints11.gridx = 1;
			GridBagConstraints gridBagConstraints10 = new GridBagConstraints();
			gridBagConstraints10.gridx = 0;
			gridBagConstraints10.anchor = GridBagConstraints.WEST;
			gridBagConstraints10.gridy = 9;
			vGridSpaceLabel = new JLabel();
			vGridSpaceLabel.setText("Vertical Grid Spaces:");
			GridBagConstraints gridBagConstraints9 = new GridBagConstraints();
			gridBagConstraints9.fill = GridBagConstraints.BOTH;
			gridBagConstraints9.gridy = 8;
			gridBagConstraints9.weightx = 1.0;
			gridBagConstraints9.anchor = GridBagConstraints.WEST;
			gridBagConstraints9.gridx = 1;
			GridBagConstraints gridBagConstraints7 = new GridBagConstraints();
			gridBagConstraints7.fill = GridBagConstraints.BOTH;
			gridBagConstraints7.gridy = 9;
			gridBagConstraints7.weightx = 1.0;
			gridBagConstraints7.anchor = GridBagConstraints.WEST;
			gridBagConstraints7.gridx = 1;
			GridBagConstraints gridBagConstraints6 = new GridBagConstraints();
			gridBagConstraints6.gridx = 0;
			gridBagConstraints6.anchor = GridBagConstraints.WEST;
			gridBagConstraints6.gridy = 8;
			hGridLabel = new JLabel();
			hGridLabel.setText("Horizontal Grid Sizes:");
			GridBagConstraints gridBagConstraints5 = new GridBagConstraints();
			gridBagConstraints5.gridx = 0;
			gridBagConstraints5.anchor = GridBagConstraints.WEST;
			gridBagConstraints5.gridy = 6;
			vGridSizeLabel = new JLabel();
			vGridSizeLabel.setText("Vertical Grid Sizes:");
			GridBagConstraints gridBagConstraints4 = new GridBagConstraints();
			gridBagConstraints4.fill = GridBagConstraints.BOTH;
			gridBagConstraints4.gridy = 6;
			gridBagConstraints4.weightx = 1.0;
			gridBagConstraints4.anchor = GridBagConstraints.WEST;
			gridBagConstraints4.gridx = 1;
			GridBagConstraints gridBagConstraints31 = new GridBagConstraints();
			gridBagConstraints31.gridx = 0;
			gridBagConstraints31.anchor = GridBagConstraints.WEST;
			gridBagConstraints31.gridy = 4;
			ImageTextLabel = new JLabel();
			ImageTextLabel.setText("Image Text:");
			GridBagConstraints gridBagConstraints21 = new GridBagConstraints();
			gridBagConstraints21.fill = GridBagConstraints.BOTH;
			gridBagConstraints21.gridy = 4;
			gridBagConstraints21.weightx = 1.0;
			gridBagConstraints21.gridwidth = 1;
			gridBagConstraints21.anchor = GridBagConstraints.WEST;
			gridBagConstraints21.gridx = 1;
			GridBagConstraints gridBagConstraints1 = new GridBagConstraints();
			gridBagConstraints1.gridx = 1;
			gridBagConstraints1.gridy = 26;
			GridBagConstraints gridBagConstraints = new GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 26;
			jPanel = new JPanel();
			jPanel.setLayout(new GridBagLayout());
			jPanel.add(getUpdate(), gridBagConstraints);
			jPanel.add(getSave(), gridBagConstraints1);
			jPanel.add(getImageText(), gridBagConstraints21);
			jPanel.add(ImageTextLabel, gridBagConstraints31);
			jPanel.add(getVGridSizeString(), gridBagConstraints4);
			jPanel.add(vGridSizeLabel, gridBagConstraints5);
			jPanel.add(hGridLabel, gridBagConstraints6);
			jPanel.add(getVGridSpaces(), gridBagConstraints7);
			jPanel.add(getHGridSizes(), gridBagConstraints9);
			jPanel.add(vGridSpaceLabel, gridBagConstraints10);
			jPanel.add(getHGridSpaces(), gridBagConstraints11);
			jPanel.add(hGridSpacesLabel, gridBagConstraints12);
			jPanel.add(getFontChooser(), gridBagConstraints13);
			jPanel.add(fontChooserLabel, gridBagConstraints14);
			jPanel.add(ZoomLabel, gridBagConstraints15);
			jPanel.add(FontSizeLabel, gridBagConstraints18);
			jPanel.add(getFontSpinner(), gridBagConstraints17);
			jPanel.add(SeedLabel, gridBagConstraints2);
			jPanel.add(getSeedSpinner(), gridBagConstraints51);
			jPanel.add(getZoom(), gridBagConstraints22);
			jPanel.add(HeightLabel, gridBagConstraints16);
			jPanel.add(getHeight(), gridBagConstraints23);
			jPanel.add(getMinFontColor(), gridBagConstraints3);
			jPanel.add(getMaxFontColor(), gridBagConstraints41);
			jPanel.add(getMinBGColor(), gridBagConstraints52);
			jPanel.add(getMaxBGColor(), gridBagConstraints61);
			jPanel.add(getMinMaskColor(), gridBagConstraints71);
			jPanel.add(getMaxMaskColor(), gridBagConstraints81);
			jPanel.add(MinFontColorLabel, gridBagConstraints91);
			jPanel.add(MaxFontColorLabel, gridBagConstraints101);
			jPanel.add(MinBGColorLabel, gridBagConstraints111);
			jPanel.add(MaxBGColorLabel, gridBagConstraints121);
			jPanel.add(MinMaskColorLabel, gridBagConstraints131);
			jPanel.add(MaxMaskColorLabel, gridBagConstraints141);
			jPanel.add(Status, gridBagConstraints24);
			jPanel.add(SaveNameLabel, gridBagConstraints32);
			jPanel.add(getSaveName(), gridBagConstraints53);
			jPanel.add(PaddingLabel, gridBagConstraints62);
			jPanel.add(getPadding(), gridBagConstraints72);
		}
		return jPanel;
	}

	/**
	 * This method initializes Update	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getUpdate() {
		if (Update == null) {
			Update = new JButton();
			Update.setText("Update");
			Update.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					UpdateImage();
				}
			});
		}
		return Update;
	}

	/**
	 * This method initializes Save	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getSave() {
		if (Save == null) {
			Save = new JButton();
			Save.setText("Save");
			Save.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					Save();
				}
			});
		}
		return Save;
	}

	/**
	 * This method initializes ImageText	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getImageText() {
		if (ImageText == null) {
			ImageText = new JTextField();
			ImageText.setText("ABCD");

			ImageText.addKeyListener(new java.awt.event.KeyAdapter() {
				public void keyReleased(java.awt.event.KeyEvent e) {
					UpdateImage();
				}
			});
		}
		return ImageText;
	}

	/**
	 * This method initializes vGridSizeString	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getVGridSizeString() {
		if (vGridSizeString == null) {
			vGridSizeString = new JTextField();
			vGridSizeString.setText("5");
		}
		return vGridSizeString;
	}

	/**
	 * This method initializes vGridSpaces	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getVGridSpaces() {
		if (vGridSpaces == null) {
			vGridSpaces = new JTextField();
			vGridSpaces.setText("1");
		}
		return vGridSpaces;
	}

	/**
	 * This method initializes hGridSizes	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getHGridSizes() {
		if (hGridSizes == null) {
			hGridSizes = new JTextField();
			hGridSizes.setText("5");
		}
		return hGridSizes;
	}

	/**
	 * This method initializes hGridSpaces	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getHGridSpaces() {
		if (hGridSpaces == null) {
			hGridSpaces = new JTextField();
			hGridSpaces.setText("1");
		}
		return hGridSpaces;
	}

	/**
	 * This method initializes FontChooser	
	 * 	
	 * @return javax.swing.JComboBox	
	 */
	private JComboBox getFontChooser() {
		if (FontChooser == null) {
			FontChooser = new JComboBox();
			// Check to see if the font exists on the system
			GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
			String[] fontFamilies = ge.getAvailableFontFamilyNames();
			int l_index = 0;
			int l_c = 0;
			for (String s : fontFamilies) {
				FontChooser.addItem(s);
				if (s == "SansSerif") l_index = l_c;
				l_c++;
			}
			try {
				FontChooser.setSelectedIndex(l_index);
				FontChooser.addItemListener(new java.awt.event.ItemListener() {
					public void itemStateChanged(java.awt.event.ItemEvent e) {
						UpdateImage();
					}
				});
			} catch (Exception e) {
				//nothing.
			}
			
		}
		return FontChooser;
	}

	
	/**
	 * This method initializes ImageLabel	
	 * 	
	 * @return javax.swing.JLabel	
	 */
	private JLabel getImageLabel() {
		if (ImageLabel == null) {
			ImageLabel = new JLabel();
			ImageLabel.setText("");
		}
		return ImageLabel;
	}

	/**
	 * This method initializes jPanel1	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getJPanel1() {
		if (jPanel1 == null) {
			GridBagConstraints gridBagConstraints8 = new GridBagConstraints();
			gridBagConstraints8.gridx = 0;
			gridBagConstraints8.gridy = 0;
			jPanel1 = new JPanel();
			jPanel1.setLayout(new GridBagLayout());
			jPanel1.add(getImageLabel(), gridBagConstraints8);
		}
		return jPanel1;
	}

	/**
	 * This method initializes jScrollPane	
	 * 	
	 * @return javax.swing.JScrollPane	
	 */
	private JScrollPane getJScrollPane() {
		if (jScrollPane == null) {
			jScrollPane = new JScrollPane();
			jScrollPane.setViewportView(getJPanel1());
		}
		return jScrollPane;
	}

	/**
	 * This method initializes FontSpinner	
	 * 	
	 * @return javax.swing.JSpinner	
	 */
	private JSpinner getFontSpinner() {
		if (FontSpinner == null) {
			FontSpinner = new JSpinner();
			FontSpinner.setValue(96);
			FontSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					UpdateImage();
				}
			});
		}
		return FontSpinner;
	}

	/**
	 * This method initializes SeedSpinner	
	 * 	
	 * @return javax.swing.JSpinner	
	 */
	private JSpinner getSeedSpinner() {
		if (SeedSpinner == null) {
			SeedSpinner = new JSpinner();
			SeedSpinner.setValue(1024);
			SeedSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					UpdateImage();
				}
			});
		}
		return SeedSpinner;
	}

	/**
	 * This method initializes DirectionsTextArea	
	 * 	
	 * @return javax.swing.JTextArea	
	 */
	private JTextArea getDirectionsTextArea() {
		if (DirectionsTextArea == null) {
			DirectionsTextArea = new JTextArea();
			DirectionsTextArea.setText("Inkerator is a testing application for " +
									   "invisible ink\nprinters. It utilizes " +
									   "the InvisibleInkFactory library\nto " +
									   "generate the images and allows a user" +
									   " to save\nthem to file.");
			DirectionsTextArea.setEditable(false);
		}
		return DirectionsTextArea;
	}

	/**
	 * This method initializes Zoom	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getZoom() {
		if (Zoom == null) {
			Zoom = new JTextField();
			Zoom.setText("1.0");
		}
		return Zoom;
	}

	/**
	 * This method initializes Height	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getHeight() {
		if (Height == null) {
			Height = new JTextField();
			Height.setText("0");
		}
		return Height;
	}

	/**
	 * This method initializes MinFontColor	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getMinFontColor() {
		if (MinFontColor == null) {
			MinFontColor = new JTextField();
			MinFontColor.setText("0.0,0.0,0.0");
		}
		return MinFontColor;
	}

	/**
	 * This method initializes MaxFontColor	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getMaxFontColor() {
		if (MaxFontColor == null) {
			MaxFontColor = new JTextField();
			MaxFontColor.setText("0.0,1.0,0.0");
		}
		return MaxFontColor;
	}

	/**
	 * This method initializes MinBGColor	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getMinBGColor() {
		if (MinBGColor == null) {
			MinBGColor = new JTextField();
			MinBGColor.setText("0.0,0.0,0.0");
		}
		return MinBGColor;
	}

	/**
	 * This method initializes MaxBGColor	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getMaxBGColor() {
		if (MaxBGColor == null) {
			MaxBGColor = new JTextField();
			MaxBGColor.setText("0.0,0.0,1.0");
		}
		return MaxBGColor;
	}

	/**
	 * This method initializes MinMaskColor	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getMinMaskColor() {
		if (MinMaskColor == null) {
			MinMaskColor = new JTextField();
			MinMaskColor.setText("0.0,0.0,0.0");
		}
		return MinMaskColor;
	}

	/**
	 * This method initializes MaxMaskColor	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getMaxMaskColor() {
		if (MaxMaskColor == null) {
			MaxMaskColor = new JTextField();
			MaxMaskColor.setText("1.0,0.0,0.0");
		}
		return MaxMaskColor;
	}

	/**
	 * This method initializes SaveName	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getSaveName() {
		if (SaveName == null) {
			SaveName = new JTextField();
			SaveName.setText("inkerator#.pdf");
		}
		return SaveName;
	}

	/**
	 * This method initializes Padding	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getPadding() {
		if (Padding == null) {
			Padding = new JTextField();
			Padding.setText("10");
		}
		return Padding;
	}

	/**
	 * Launches this application
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {				
				Inkerator application = new Inkerator();
				application.getJFrame().setVisible(true);
				application.UpdateImage();
			}
		});
	}

}
